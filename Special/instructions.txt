***  adding phone in login *** mm
1- change login file
2- add col in db
3- add fillable in user<app
4- copy username method in treat of loginController<Auth<Controller<app
    public function username()
    {
        return 'phone';
    }
-------------------------------------
*** adding phone and email in register *** mm
in register controller
1- add mobile in validator
        return Validator::make($data, [
            'name' => ['required', 'string', 'max:255'],
            'email' => ['required', 'string','email', 'max:255', 'unique:users'],
            'mobile' => ['required', 'string', 'max:255', 'unique:users'],
            'password' => ['required', 'string', 'min:8', 'confirmed'],
        ]);

 2- add mobile in create method
         return User::create([
             'name' => $data['name'],
             'email' => $data['email'],
             'mobile' => $data['mobile'],
             'password' => Hash::make($data['password']),
         ]);
-------------------------------------
*** authentication using phone and email in one input *** mm
1- adjust login.blade.php
change email input to identify or any variable
2- got to app > Controller > Auth > loginController
    public function username()
    {
        //return 'email'

        $value = request() ->input('identify');
        $field = filter_var($value, FILTER_VALIDATE_EMAIL) ? 'email' : 'mobile';
        request()->merge([$field =>$value ]);
        return  $field;
    }
3- add email and mobile in database
4- add fillable in user<app

-------------------------------------
*** configure head bar of users ***
-------------------------------------
*** How to upload your project in server or download project from github ***
1- download or upload the project
2- set database same of project by migration
3- change configuration of .env file [database,mailtrap,facebooklogin,...etc]
4- down vendor using >> composer install
-------------------------------------
*** Verification Email **** mm
1- sign in mailtrap > demoBox
2- past parameter in .env file set [ MAIL_HOST,MAIL_PORT,MAIL_USERNAME,MAIL_PASSWORD,MAIL_FROM_ADDRESS]
3- add "implements MustVerifyEmail" in user<app
4- add ['verify'=>true] in web.php<Route
5- add middelware of verified in function
-------------------------------------
*** Login using FaceBook *** mm
1- install "composer require laravel/socialite"

2 - add Laravel\Socialite\SocialiteServiceProvider::class,
 and its ailas
 [ 'Socialite' => Laravel\Socialite\Facades\Socialite::class] config<app
* in config services  add this >>
'facebook'      => [
      'client_id'     => env('FACEBOOK_CLIENT_ID'),
      'client_secret' => env('FACEBOOK_CLIENT_SECRET'),
      'redirect'      => env('FACEBOOK_REDIRECT_URL')
  ]


3- go to facebook devoloper and set a new application and get citification
4- copy client id and client secret and past in .env file
5- set terms & policy privacy
6- test publish mode

7- set new button in login blade and set {{url('pathOfRoute')}} in href
8- make a new route and contrller using "php artisan make:controller SocialController"
9- in controller make a function >>
public function callBack($services){
return Socialite::driver($services)->redirect();
}

10- set a callback directory
>>  function in controller  public     public function callback($services){
                                           $user = Socialite::with($services) -> user();

                                       }
>> route
Route::get('/callback/{services}', 'SocialiteController@callback');


>>in facebook redirect url validator put this url
http://localhost:8000/callback/facebook



*** laravel task scheduler *** mm
1- set a new command in with locate in  app>console<command  using >> php artisan make:command expiration
2- adjust this line like this >> protected $signature = 'user:expire';
3- adjust this line like this >> protected $description = 'expire users automatically every 5 minutes';
4- add expire field in database "ALTER TABLE `users` ADD `expire` TINYINT(1) NOT NULL DEFAULT '0' COMMENT '0==> active,1==>expire' AFTER `remember_token`; "
5- add fillable in user<app
6- in expiration file set function of handel like this
    public function handle()
    {
        $users = User::where('expire', 0)->get(); //collection of users
        foreach ($users as $user) {
            $user->update(['expire' => 1]);
        }

 7- in kernal file change functions like
      protected $commands = [
          \App\console\commands\expiration::class,   // change expiration name
      ];

          protected function schedule(Schedule $schedule)
          {
               $schedule->command('user:expire')
                        ->everyMinute();
          }
 8- write this code if you need to test your schedule without waiting
 >> php artisan schedule:run

-------------------------------------
*** laravel task shcedular send emails ***
1- set a new command in with locate in  app>console<command  using >> php artisan make:command notify
     in file of command
2- adjust this line like this >> protected $signature = 'email:notify';
3- adjust this line like this >> protected $description = 'sending email every day';
4- in kernal file change functions like
      protected $commands = [
          \App\console\commands\expiration::class,   // change expiration name
      ];
          protected function schedule(Schedule $schedule)
          {
               $schedule->command('email:notify')->daily();
          }
   set view and controller
6- set controller >> php artisan make:mail Notify

7- set add template of message in view

.................view......................
@extends('layouts.app')

@section('content')
<div class="container">
    <div class="row justify-content-center">
        <div class="col-md-8">
            <div class="card">
                <div class="card-header"> {{$datahamada['fl']}} English </div>
                <div class="card-body">{{$datahamada['sl']}} German </div>
            </div>
        </div>
    </div>
</div>
@endsection

.................controller......................
<?php

namespace App\Mail;

use Illuminate\Bus\Queueable;
use Illuminate\Contracts\Queue\ShouldQueue;
use Illuminate\Mail\Mailable;
use Illuminate\Queue\SerializesModels;

class Notify extends Mailable
{
    use Queueable, SerializesModels;

    public $datahamada;
    public function __construct($data){
        $this->datahamada = $data;
    }


    public function build()
    {
        return $this->view('view.mails.emailSend',compact($this->datahamada));
    }
}


.................schedule......................
<?php

namespace App\Console\Commands;

use App\User;
use Illuminate\Console\Command;
use Illuminate\Support\Facades\Mail;

class notify extends Command
{

    protected $signature = 'email:notify';
    protected $description = 'sending email every day';
    public function __construct()
    {
        parent::__construct();
    }
    public function handle()
    {
        //$users = User::select('email')-> get(); // return as dictionary
        $emails = User::pulck('email')-> toArray(); // return as array
        $data = ['fl'=>'english','sl'=>'german'];
        foreach ($emails as $email){
                Mail::To($email)->send(new \App\Mail\Notify($data));
        }
    }
}

-------------------------------------
*** Creating Models ***
1- to create model >> php artisan make:model models/Offer
2-     protected $table = 'users';
       protected  $fillable = 'email,mobile';
       protected $hidden = 'mobile';
3- php artisan make:controller db/CurdController
-------------------------------------

***how to make validation of form ***
public function insert(OfferRequest $request){
            $rules = $this->getRules();
            $messages = $this->getMessages();

            $validator = Validator::make($request->all(),$rules,$messages);
            if ($validator->fails()){
                return redirect()->back()->withErrors($validator)->withInput($request->all());
            }
            Form::create([
                'fname'=>'ahmrd',
                'lname'=>'mohsmrd'
            ]);
            return redirect()->back()->with(['success'=>'تمت العملية بنجاح']);
        }


    public function getRules(){

    $rules = [
        'name' => 'required|max:100|unique:offers,name',
        'price' => 'required|numeric',
        'details' => 'required',
    ];
        return $rules;
    }

    public function getMessages()
    {
        $messages = [
            // main syntax : nameOfFiled.rule => message
            'name.required' => __('messages.offer name required'),
            'name.unique' => 'اسم العرض موجود ',
            'price.numeric' => 'سعر العرض يجب ان يكون ارقام',
            'price.required' => 'السعر مطلوب',
            'details.required' => 'ألتفاصيل مطلوبة ',
        ];
        return $messages;
    }

*** how to switch between langs using mcamara ***
1- install package => composer require mcamara/laravel-localization
2- to set langs in config folder (config/laravellocalization.php)=> php artisan vendor:publish --provider="Mcamara\LaravelLocalization\LaravelLocalizationServiceProvider"
3- set this parameters in kernal of http in routeMiddleware  ==>
        'localize'                => \Mcamara\LaravelLocalization\Middleware\LaravelLocalizationRoutes::class,
        'localizationRedirect'    => \Mcamara\LaravelLocalization\Middleware\LaravelLocalizationRedirectFilter::class,
        'localeSessionRedirect'   => \Mcamara\LaravelLocalization\Middleware\LocaleSessionRedirect::class,
        'localeCookieRedirect'    => \Mcamara\LaravelLocalization\Middleware\LocaleCookieRedirect::class,
        'localeViewPath'          => \Mcamara\LaravelLocalization\Middleware\LaravelLocalizationViewPath::class
4- set prefix of langs in routes file =>
Route::group(
[
	'prefix' => LaravelLocalization::setLocale(),
	'middleware' => [ 'localeSessionRedirect', 'localizationRedirect', 'localeViewPath' ]
], function(){
 //...
});

5- uncomment ar  from config>laravellocalization.php

6- add url in template
                <li class="nav-item dropdown">
                    <a class="nav-link dropdown-toggle" href="#" id="navbarDropdown" role="button" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                        {{__('home_page.nav_language')}}
                    </a>
                    <div class="dropdown-menu" aria-labelledby="navbarDropdown" >
                        @foreach(LaravelLocalization::getSupportedLocales() as $localeCode => $properties)
                            <a style="color: #1b4b72;" class="dropdown-item" rel="alternate" hreflang="{{ $localeCode }}" href="{{ LaravelLocalization::getLocalizedURL($localeCode, null, [], true) }}">
                                {{ $properties['native'] }}
                            </a>
                        @endforeach

                    </div>
                </li>
---------------------------------------

*** nameing website ***
1- form .env change name of app  ==> APP_NAME=BiTeam
2- config>app ==> 'name' => env('APP_NAME', 'BiTeam '),
3- put this in title {{ config('app.name', 'Bi Team') }}
*************************
to make a new laravel project ==> composer create-project laravel/laravel nameOfProject "8.*"
to clean your project ===> php artisan optimize:clear
to run server ===> php artisan serve
to make new model ===> php artisan make:model models/Offer
to make new controller ==> php artisan make:controller DVcontroller
to make new mail ==> php artisan make:mail DVcontroller
to make migration ==> php artisan migrate
when you change in .env file ==> composer dump-autoload
when you download lib in vendor ==> composer require laravel/packageName "1.2"

*************** snippets of blade template ********
@guest @endguest   => for normal user
@if @endif @else elseif


*** status code of http ***
404 => frobidden
403 => unauthorized
419 => csrf
442 => error for validation
500 => code problem



upload image
upload image ajax
write message alert in mm
select table and update and delete using ajax

